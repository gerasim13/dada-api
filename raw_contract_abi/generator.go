//go:generate go run generator.go

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	log "github.com/y2labs-0sh/dada-api/logger"
)

const (
	blobFileName string = "../box/abi_blob.go"
	embedFolder  string = "../raw_contract_abi"
)

// Define vars for build template
var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package box

// Code generated by go generate; DO NOT EDIT.

func init() {
    {{- range $name, $file := . }}
        box.Add("{{ $name }}", []byte{ {{ conv $file }} })
    {{- end }}
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func main() {
	// Checking directory with files
	if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
		log.Fatal("Configs directory does not exists!")
	}

	// Create map for filenames
	configs := make(map[string][]byte)

	// Walking through embed directory
	err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
		embededPath := "abi" + filepath.ToSlash(strings.TrimPrefix(path, embedFolder))

		if info.IsDir() {
			// Skip directories
			log.Info(fmt.Sprintf("%s is a directory, skipping...", path))()
			return nil
		} else {
			// If element is a simple file, embed
			log.Info(fmt.Sprintf("%s is a file, packing in...", path))()

			b, err := ioutil.ReadFile(filepath.Clean(path))
			if err != nil {
				// If file not reading
				log.Error(fmt.Sprintf("Error reading %s: %s", path, err))
				return err
			}

			// Add file name to map
			configs[embededPath] = b
		}

		return nil
	})
	if err != nil {
		log.Fatal(fmt.Sprintf("Error walking through embed directory: %s", err))()
	}

	// Create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatal(fmt.Sprintf("Error creating blob file: %s", err))()
	}
	if err := f.Close(); err != nil {
		log.Fatal(fmt.Sprintf("Error creating blob file: %s", err))()
	}

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, configs); err != nil {
		log.Fatal(fmt.Sprintf("Error executing template %s", err))()
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal(fmt.Sprintf("Error formatting generated code %s", err))()
	}

	// Writing blob file
	if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal(fmt.Sprintf("Error writing blob file %s", err))()
	}
}
